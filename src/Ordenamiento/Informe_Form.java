/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Ordenamiento;

import java.lang.management.GarbageCollectorMXBean;
import java.util.Random;
import javax.swing.DefaultListModel;
import javax.swing.JList;

/**
 *
 * @author Sebas Carlosama
 */
public class Informe_Form extends javax.swing.JFrame {

    /**
     * Creates new form Infororme_Form
     */
    public Informe_Form() {
        initComponents();
        this.setLocationRelativeTo(null);

        if (modeloBurbuja == null) {
            modeloBurbuja = new DefaultListModel();
            lstBurbuja.setModel(modeloBurbuja);
        }
        if (modeloQuickSort == null) {
            modeloQuickSort = new DefaultListModel();
            lstQuickSort.setModel(modeloQuickSort);
        }
        this.limpiarJlist(lstBurbuja, modeloBurbuja);
        this.limpiarJlist(lstQuickSort, modeloQuickSort);
        btnEvaluar.setEnabled(false);

        //this.EJECUTA();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtN = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnGenerar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstQuickSort = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstBurbuja = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnEvaluar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        txtxNumeros = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtN.setText("10000");

        jLabel1.setText("N numeros:");

        btnGenerar.setText("Generar");
        btnGenerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarActionPerformed(evt);
            }
        });

        lstQuickSort.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(lstQuickSort);

        lstBurbuja.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(lstBurbuja);

        jLabel2.setText("Burbuja");

        jLabel3.setText("QuickSort");

        btnEvaluar.setText("Evaluar");
        btnEvaluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEvaluarActionPerformed(evt);
            }
        });

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(276, 276, 276)
                        .addComponent(btnLimpiar)
                        .addGap(238, 238, 238))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtN, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(52, 52, 52)
                                .addComponent(btnGenerar))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(129, 129, 129)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnEvaluar)
                                .addGap(48, 48, 48)
                                .addComponent(jLabel3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(23, 23, 23))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtxNumeros)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(btnGenerar))
                .addGap(18, 18, 18)
                .addComponent(txtxNumeros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(btnEvaluar))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnLimpiar)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private DefaultListModel modeloBurbuja;
    private DefaultListModel modeloQuickSort;
    private MetodosOrdenamientos Burbuja;
    private MetodosOrdenamientos QuickSort;

    public void AgregarDato(String cadena, JList lista, DefaultListModel modelo) {

        modelo = (DefaultListModel) lista.getModel();
        modelo.addElement(cadena);

    }

    public void limpiarJlist(JList lista, DefaultListModel modelo) {
        modelo = (DefaultListModel) lista.getModel();
        modelo.clear();
    }


    private void btnEvaluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEvaluarActionPerformed
        this.OrdenamientoBurbuja(arreglo_numeros1);
        this.OrdenamientoQuickSort(arreglo_numeros2);
        btnEvaluar.setEnabled(false);
    }//GEN-LAST:event_btnEvaluarActionPerformed

    private int[] arreglo_numeros1;
    private int[] arreglo_numeros2;
    private void btnGenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarActionPerformed
        try {

            int n = Integer.parseInt(txtN.getText());
            String cadena="";
            Random num_random = new Random();
            arreglo_numeros1 = new int[n];
            arreglo_numeros2 = new int[n];

            int random;
            
            for (int i = 0; i < arreglo_numeros1.length; i++) {
                random = num_random.nextInt(1000);
                cadena+=random+"-";
                arreglo_numeros1[i] = random;
                arreglo_numeros2[i] = random;
            }
            txtxNumeros.setText(cadena);
            btnEvaluar.setEnabled(true);

        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnGenerarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
       txtN.setText("1000");
       this.limpiarJlist(lstBurbuja, modeloBurbuja);
       this.limpiarJlist(lstQuickSort, modeloQuickSort);
      
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void OrdenamientoBurbuja(int[] arreglo) {
        if (Burbuja == null) {
            Burbuja = new MetodosOrdenamientos(arreglo);
        } else {
            Burbuja.setMatriz_numeros(arreglo);
            Burbuja.setIntercambios(0);
        }
        long inicio = System.currentTimeMillis();
        Burbuja.OrdenamientoBurbuja();
        long fin = System.currentTimeMillis();

        long mili_seg = fin - inicio;

        double hora = mili_seg / 3600000;
        double resto_hora = mili_seg % 3600000;

        double minuto = resto_hora / 60000;
        double resto_minuto = resto_hora % 60000;

        double segundo = resto_minuto / 1000;
        double milisegundos = resto_minuto % 1000;

        String hora_cadena = hora >= 10 ? "" + (int) hora : "0" + (int) hora;
        String minuto_cadena = minuto >= 10 ? "" + (int) minuto : "0" + (int) minuto;
        String segundoo_cadena = segundo >= 10 ? "" + (int) segundo : "0" + (int) segundo;
        String miliegundos_cadena = milisegundos >= 100 ? "" + (int) milisegundos : milisegundos >= 10 ? "0" + (int) milisegundos : "00" + (int) milisegundos;

        String tiempo = "HH:MM:SS:Ms → " + hora_cadena + " : " + minuto_cadena + " : " + segundoo_cadena + " : " + miliegundos_cadena;
        
        this.AgregarDato("Número de elementos: " + arreglo.length, lstBurbuja, modeloBurbuja);
        this.AgregarDato(tiempo, lstBurbuja, modeloBurbuja);
        this.AgregarDato("Número de intercambios: " + Burbuja.getIntercambios(), lstBurbuja, modeloBurbuja);
        this.AgregarDato("--------------------------------------", lstBurbuja, modeloBurbuja);

    }

    private void OrdenamientoQuickSort(int[] arreglo) {
        if (QuickSort == null) {
            QuickSort = new MetodosOrdenamientos(arreglo);
        } else {
            QuickSort.setMatriz_numeros(arreglo);
            QuickSort.setIntercambios(0);
        }

        long ini = System.currentTimeMillis();
        QuickSort.QuickSort(0, arreglo.length - 1);
        long fi = System.currentTimeMillis();

        long mili_seg = fi - ini;

        double hora = mili_seg / 3600000;
        double resto_hora = mili_seg % 3600000;

        double minuto = resto_hora / 60000;
        double resto_minuto = resto_hora % 60000;

        double segundo = resto_minuto / 1000;
        double resto_seg = resto_minuto % 1000;

        String hora_cadena = hora >= 10 ? "" + (int) hora : "0" + (int) hora;
        String minuto_cadena = minuto >= 10 ? "" + (int) minuto : "0" + (int) minuto;
        String segundoo_cadena = segundo >= 10 ? "" + (int) segundo : "0" + (int) segundo;
        String miliegundos_cadena = resto_seg >= 100 ? "" + (int) resto_seg : resto_seg >= 10 ? "0" + (int) resto_seg : "00" + (int) resto_seg;

        String tiempo = "HH:MM:SS:Ms → " + hora_cadena + " : " + minuto_cadena + " : " + segundoo_cadena + " : " + miliegundos_cadena;
        
        this.AgregarDato("Numero de elementos:  " + arreglo.length, lstQuickSort, modeloQuickSort);
        this.AgregarDato(tiempo, lstQuickSort, modeloQuickSort);
        this.AgregarDato("Número de intercambios: " + QuickSort.getIntercambios(), lstQuickSort, modeloQuickSort);
        this.AgregarDato("------------------------------------- ", lstQuickSort, modeloQuickSort);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Informe_Form.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Informe_Form.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Informe_Form.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Informe_Form.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Informe_Form().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEvaluar;
    private javax.swing.JButton btnGenerar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> lstBurbuja;
    private javax.swing.JList<String> lstQuickSort;
    private javax.swing.JTextField txtN;
    private javax.swing.JTextField txtxNumeros;
    // End of variables declaration//GEN-END:variables
}
